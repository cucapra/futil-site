{
  "url_prefix": "https://raw.githubusercontent.com/cucapra/futil/master/",
  "categories": [
    {
      "name": "library",
      "items": [
        {
          "name": "Standard",
          "file": "primitives/std.lib",
          "content": "\n(define/library ; std (verilog ../sim/lib/std.v)\n  (define/prim std_reg (p_width)\n    ((port in p_width)\n     (port in_read_in 1)\n     (port valid 1)\n     (port clk 1))\n    ((port out p_width)\n     (port out_read_out 1)\n     (port ready 1)))\n\n  (define/prim std_iterator (p_width p_start p_stop p_incr)\n    ((port valid 1)\n     (port clk 1))\n    ((port out p_width)\n     (port stop 1)\n     (port out_read_out 1)\n     (port ready 1)))\n\n  (define/prim std_const (p_width p_value)\n    ((port valid 1))\n    ((port out p_width)\n     (port out_read_out 1)\n     (port ready 1)))\n\n  (define/prim std_add (p_width)\n    ((port left p_width) (port left_read_in 1)\n                         (port right p_width) (port right_read_in 1)\n                         (port valid 1))\n    ((port out p_width) (port out_read_out 1)\n                        (port ready 1)))\n\n  (define/prim std_sub (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_mul (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_div (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_not (p_width)\n    ((port in p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_and (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_or (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out p_width) (port ready 1)))\n\n  (define/prim std_gt (p_width)\n    ((port left  p_width) (port left_read_in  1)\n     (port right p_width) (port right_read_in 1)\n     (port valid 1))\n    ((port out 1) (port out_read_out 1)\n                  (port ready 1)))\n\n  (define/prim std_lt (p_width)\n    ((port left p_width) (port left_read_in 1)\n                         (port right p_width) (port right_read_in 1)\n                         (port valid 1))\n    ((port out 1) (port out_read_out 1)\n                  (port ready 1)))\n\n  (define/prim std_eq (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out 1) (port ready 1)))\n\n  (define/prim std_neq (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out 1) (port ready 1)))\n\n  (define/prim std_ge (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out 1) (port ready 1)))\n\n  (define/prim std_le (p_width)\n    ((port left p_width) (port right p_width) (port valid 1))\n    ((port out 1) (port ready 1))))\n"
        },
        {
          "name": "Test",
          "file": "primitives/sample.lib",
          "content": "(define/library\n  (define/prim (add B)\n    ((port left B) (port right B))\n    ((port out B) (port carry 1)))\n\n  (define/prim (memory1d word-size addr-width port-mode)\n    ((port data-in word-size) (port addr addr-width))\n    ((port out word-size)))\n\n  (define/prim (register B)\n    ((port in B) (port res 1))\n    ((port out B))))\n"
        }
      ]
    },
    {
      "name": "examples",
      "items": [
        {
          "name": "Seq",
          "file": "tests/integration/seq.futil",
          "content": "(define/namespace prog\n  (define/component main () ()\n    ((new-std x0 (std_reg 32 0))\n     (-> (@ const0 out) (@ x0 in))\n     (new-std const0 (std_const 32 3))\n     (new-std const1 (std_const 32 5))\n     (-> (@ const1 out) (@ x0 in)))\n    (seq\n     (enable x0 const0)\n     (enable x0 const1))))"
        },
        {
          "name": "Par",
          "file": "tests/integration/par.futil",
          "content": "; git.status = dirty, build.date = Fri Dec 06 20:53:09 EST 2019, git.hash = 3d85987\n(define/namespace prog\n  (define/component main () ()\n    ([new-std x0 (std_reg 4 0)]\n     [-> (@ const0 out) (@ x0 in)]\n     [new-std const0 (std_const 4 0)]\n     [new-std y0 (std_reg 4 0)]\n     [-> (@ const1 out) (@ y0 in)]\n     [new-std const1 (std_const 4 10)])\n    (par\n     (enable x0 const0)\n     (enable y0 const1))))\n"
        },
        {
          "name": "Counter",
          "file": "tests/integration/counter.futil",
          "content": "; git.status = dirty, build.date = Mon Dec 16 20:53:50 EST 2019, git.hash = 43be196\n(define/namespace prog\n  (define/component main () ()\n    ((new-std i0 (std_reg 32 0))\n     (-> (@ const0 out) (@ i0 in))\n     (new-std const0 (std_const 32 0))\n     (new-std add0 (std_add 32))\n     (-> (@ i0 out) (@ add0 left))\n     (-> (@ const2 out) (@ add0 right))\n     (new-std const2 (std_const 32 1))\n     (-> (@ add0 out) (@ i0 in))\n     (new-std lt0 (std_lt 32))\n     (-> (@ i0 out) (@ lt0 left))\n     (-> (@ const1 out) (@ lt0 right))\n     (new-std const1 (std_const 32 10)))\n    (seq\n     (enable i0 const0)\n     (while (@ lt0 out) (lt0 i0 const1)\n       (enable i0 add0 const2)))))\n"
        },
        {
          "name": "Fibonacci",
          "file": "tests/integration/fib.futil",
          "content": "; git.status = dirty, build.date = Mon Dec 16 20:53:50 EST 2019, git.hash = 43be196\n(define/namespace prog\n  (define/component main () ()\n    ((new-std a0 (std_reg 32 0))\n     (-> (@ const0 out) (@ a0 in))\n     (new-std const0 (std_const 32 1))\n     (new-std i0 (std_reg 32 0))\n     (-> (@ const1 out) (@ i0 in))\n     (new-std const1 (std_const 32 0))\n     (new-std b0 (std_reg 32 0))\n     (-> (@ const2 out) (@ b0 in))\n     (new-std const2 (std_const 32 1))\n     (new-std tmp0 (std_reg 32 0))\n     (-> (@ b0 out) (@ tmp0 in))\n     (new-std add0 (std_add 32))\n     (-> (@ i0 out) (@ add0 left))\n     (-> (@ const4 out) (@ add0 right))\n     (new-std const4 (std_const 32 1))\n     (-> (@ add0 out) (@ i0 in))\n     (new-std add1 (std_add 32))\n     (-> (@ a0 out) (@ add1 left))\n     (-> (@ tmp0 out) (@ add1 right))\n     (-> (@ add1 out) (@ b0 in))\n     (-> (@ tmp0 out) (@ a0 in))\n     (new-std lt0 (std_lt 32))\n     (-> (@ i0 out) (@ lt0 left))\n     (-> (@ const3 out) (@ lt0 right))\n     (new-std const3 (std_const 32 10)))\n    (seq\n     (par\n      (enable a0 const0)\n      (enable i0 const1))\n     (enable b0 const2)\n     (while (@ lt0 out) (lt0 i0 const3)\n       (seq\n        (par\n         (enable tmp0 b0)\n         (enable i0 add0 const4))\n        (enable b0 add1 a0 tmp0)\n        (enable a0 tmp0))))))\n"
        },
        {
          "name": "If Seq",
          "file": "tests/integration/ifseq.futil",
          "content": "; git.status = dirty, build.date = Fri Dec 06 17:13:01 EST 2019, git.hash = 69c22b2\n(define/namespace prog\n  (define/component main () ()\n    ([new-std x0 (std_reg 16 0)]\n     [-> (@ const0 out) (@ x0 in)]\n     [new-std const0 (std_const 16 0)]\n     [new-std const1 (std_const 16 1)]\n     [-> (@ const1 out) (@ x0 in)]\n     [new-std const2 (std_const 16 2)]\n     [-> (@ const2 out) (@ x0 in)]\n     [new-std gt0 (std_gt 16)]\n     [-> (@ x0 out) (@ gt0 left)]\n     [-> (@ const3 out) (@ gt0 right)]\n     [new-std const3 (std_const 16 1)]\n     [new-std const4 (std_const 16 2)]\n     [-> (@ const4 out) (@ x0 in)]\n     [new-std const5 (std_const 16 4)]\n     [-> (@ const5 out) (@ x0 in)])\n    (seq\n     (enable x0 const0)\n     (enable x0 const1)\n     (enable x0 const2)\n     (if (@ gt0 out) (gt0 x0 const3)\n         (enable x0 const4)\n         (enable x0 const5)))))\n"
        },
        {
          "name": "Simple",
          "file": "tests/integration/simple.futil",
          "content": "; git.status = dirty, build.date = Mon Dec 16 20:53:50 EST 2019, git.hash = 43be196\n(define/namespace prog\n  (define/component main () ()\n    (; structure\n     [new-std a0 (std_reg 32 0)]\n     [new-std const0 (std_const 32 0)]\n     [new-std b0 (std_reg 32 0)]\n     [new-std const1 (std_const 32 1)]\n     [new-std gt0 (std_gt 32)]\n     [new-std const2 (std_const 32 1)]\n     [new-std y0 (std_reg 32 0)]\n     [new-std const3 (std_const 32 2)]\n     [new-std z0 (std_reg 32 0)]\n     [new-std const4 (std_const 32 4)]\n     [-> (@ const0 out) (@ a0 in)]\n     [-> (@ const1 out) (@ b0 in)]\n     [-> (@ a0 out) (@ gt0 left)]\n     [-> (@ const2 out) (@ gt0 right)]\n     [-> (@ const3 out) (@ y0 in)]\n     [-> (@ const4 out) (@ z0 in)])\n    (seq\n     (par\n      (enable a0 const0)\n      (enable b0 const1))\n     (enable gt0 b0 const2)\n     (if (@ gt0 out) (gt0 a0 const2)\n         (enable y0 const3)\n         (enable z0 const4)))))\n"
        },
        {
          "name": "While Seq",
          "file": "tests/integration/while-seq.futil",
          "content": "(define/namespace prog\n  (define/component main () ()\n    ([new-std i0 (std_iterator 32 0 10 1)]\n     [new-std x0 (std_reg 32)]\n     [new-std sum (std_reg 32)]\n     [new-std add (std_add 32)]\n     [-> (@ i0 out) (@ x0 in)]\n     [-> (@ i0 out) (@ add left)]\n     [-> (@ x0 out) (@ add right)]\n     [-> (@ add out) (@ sum in)])\n    (while (@ i0 stop) (i0)\n           (seq\n            (enable sum add x0 i0)\n            (enable x0 i0)))))\n"
        }
      ]
    }
  ]
}
